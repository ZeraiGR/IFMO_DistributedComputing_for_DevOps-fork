---
- name: Home work 2 - Add MariaDB Replica to the cluster
  hosts: carrier
  vars:
    db_root_pass: superrootpass
    db_master: mariadb-master
    db_replica: mariadb-replica
    mariadb_master_data_dir: /srv/docker/mariadb-master
    mariadb_replica_data_dir: /srv/docker/mariadb-replica
    db_repl_user: repl_user
    db_repl_pass: repl_password
  tasks:
    - name: Display a message
      ansible.builtin.debug:
        msg: "This playbook adds a replica to the existing MariaDB master. It assumes playbook1 has already been run."

    - name: Create data directory for MariaDB replica
      ansible.builtin.file:
        path: "{{ mariadb_replica_data_dir }}"
        state: directory
        mode: "0755"
    
    - name: Create MariaDB replica config from template
      ansible.builtin.template:
        src: templates/replica.cnf.j2
        dest: /srv/docker/mariadb-conf/replica.cnf
        mode: "0644"
    
    - name: Run MariaDB Replica container
      community.docker.docker_container:
        name: "{{ db_replica }}"
        image: mariadb:11
        state: started
        restart_policy: unless-stopped
        networks:
          - name: wp-network
        ports:
          - "127.0.0.1:3307:3306" # Пробрасываем на порт 3307 для ручных проверок (см. REAME 2 лб), т.к 3306 уже занят мастером
        env:
          MARIADB_MASTER_HOST: "{{ db_master }}"
          MARIADB_MASTER_PORT: "3306"
          MARIADB_MASTER_USER: "{{ db_repl_user }}"
          MARIADB_MASTER_PASSWORD: "{{ db_repl_pass }}"
          MARIADB_REPLICATION_MODE: "slave"
          MARIADB_REPLICATION_USER: "{{ db_repl_user }}"
          MARIADB_REPLICATION_PASSWORD: "{{ db_repl_pass }}"
          MYSQL_ROOT_PASSWORD: "{{ db_root_pass }}"
        volumes:
          - "{{ mariadb_replica_data_dir }}:/var/lib/mysql"
          - "/srv/docker/mariadb-conf/replica.cnf:/etc/mysql/conf.d/replica.cnf:ro"
    
    - name: Wait for MariaDB Replica port to be available
      ansible.builtin.wait_for:
        host: 127.0.0.1
        port: 3307
        state: started
        delay: 5
        timeout: 120
    
    - name: Check if MariaDB Replica is responding to queries
      community.mysql.mysql_info:
        login_user: root
        login_password: "{{ db_root_pass }}"
        login_host: 127.0.0.1
        login_port: 3307
      register: replica_ping_result
      until: replica_ping_result is succeeded
      retries: 30
      delay: 5
    
    - name: Verify that replication process is running successfully
      community.mysql.mysql_query:
        login_user: root
        login_password: "{{ db_root_pass }}"
        login_host: 127.0.0.1
        login_port: 3307
        query: "SHOW SLAVE STATUS"
      register: replica_status
      until:
        - replica_status.query_result[0][0].Slave_IO_Running == 'Yes'
        - replica_status.query_result[0][0].Slave_SQL_Running == 'Yes'
      retries: 30
      delay: 5
    
    - name: Final assertion to confirm replication is healthy
      ansible.builtin.assert:
        that:
          - replica_status.query_result[0][0].Slave_IO_Running == 'Yes'
          - replica_status.query_result[0][0].Slave_SQL_Running == 'Yes'
          - replica_status.query_result[0][0].Seconds_Behind_Master is defined
        success_msg: "Replication is healthy! IO: Yes, SQL: Yes, Lag: {{ replica_status.query_result[0][0].Seconds_Behind_Master }}s."
        fail_msg: "Replication check failed! Status: {{ replica_status.query_result[0][0] }}"